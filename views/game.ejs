<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">


    <link rel="stylesheet" href="/vendor/normalize-4.1.1.css" type="text/css" />
    <link rel="stylesheet" href="/vendor/border-box.css" type="text/css" />

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <link href="https://fonts.googleapis.com/css?family=Bitter:400,400i,700&display=swap" rel="stylesheet">

    <link rel="stylesheet" href="/example/example.css" type="text/css">


    <link rel="stylesheet" href="/styles/layout.css" type="text/css" />
    <link rel="stylesheet" href="/styles/styles.css" type="text/css" />

    <title>Heart of the Cards | Game Play </title>
    <script src="/socket.io/socket.io.js"></script>
  </head>
  <body>
    <% include ../views/partials/_header %>
    <main class="container-fluid game">
      <article class="player1-cards">
        <div class="card p1-r1" data-value="1"> <div class="back"></div></div>
        <div class="card p1-r2" data-value="2"><div class="back"></div></div>
        <div class="card p1-r3" data-value="3"><div class="back"></div></div>
        <div class="card p1-r4" data-value="4"><div class="back"></div></div>
        <div class="card p1-r5" data-value="5"><div class="back"></div></div>
        <div class="card p1-r6" data-value="6"><div class="back"></div></div>
        <div class="card p1-r7" data-value="7"><div class="back"></div></div>
        <div class="card p1-r8" data-value="8"><div class="back"></div></div>
        <div class="card p1-r9" data-value="9"><div class="back"></div></div>
        <div class="card p1-r10" data-value="10"><div class="back"></div></div>
        <div class="card p1-r11" data-value="11"><div class="back"></div></div>
        <div class="card p1-r12" data-value="12"><div class="back"></div></div>
        <div class="card p1-r13"data-value="13"><div class="back"></div></div>
      </article>
      <article id="game-play"></article>
      <article class="player2-cards">
        <div class="card clubs rank1 p2-r1" data-value="1"> <div class="face"></div></div>
        <div class="card clubs rank2 p2-r2" data-value="2"><div class="face"></div></div>
        <div class="card clubs rank3 p2-r3" data-value="3"><div class="face"></div></div>
        <div class="card clubs rank4 p2-r4" data-value="4"><div class="face"></div></div>
        <div class="card clubs rank5 p2-r5" data-value="5"><div class="face"></div></div>
        <div class="card clubs rank6 p2-r6" data-value="6"><div class="face"></div></div>
        <div class="card clubs rank7 p2-r7" data-value="7"><div class="face"></div></div>
        <div class="card clubs rank8 p2-r8" data-value="8"><div class="face"></div></div>
        <div class="card clubs rank9 p2-r9" data-value="9"><div class="face"></div></div>
        <div class="card clubs rank10 p2-r10" data-value="10"><div class="face"></div></div>
        <div class="card clubs rank11 p2-r11" data-value="11"><div class="face"></div></div>
        <div class="card clubs rank12 p2-r12" data-value="12"><div class="face"></div></div>
        <div class="card clubs rank13 p2-r13"data-value="13"><div class="face"></div></div>
      </article>
      <!-- <article>
        <div role="alert" aria-live="assertive" aria-atomic="true" class="toast" data-autohide="false" style="z-index: 1;">
          <div class="toast-header">
            <img src="..." class="rounded mr-2" alt="...">
            <strong class="mr-auto">Bootstrap</strong>
            <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="toast-body"></div>
        </div>
      </article> -->
    </main>
    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
    <script src="deck-of-cards/dist/deck.min.js"></script>

    <script>
      // Instantiate a deck
      var deck = Deck();
      console.log(deck);

      // display it in a html container
      var $container = document.getElementById('game-play');
      deck.mount($container);

      // Select the first card
      var card = deck.cards[0];

      // Add it to an html container
      card.mount($container);

      // card.setSide('front');
      // card.setSide('back');

      var removedCards = deck.cards.splice(0, 39);

      removedCards.forEach(function (removedCard) {
          removedCard.unmount();
      });


      deck.cards.forEach(function (card){
        // card.enableDragging();
        card.enableFlipping();
        // deck.shuffle();
        // card.enableFlipping();
        // deck.shuffle({duration: 500});
      })
    </script>

    <script>

      $(document).ready(function(){

        // Identify the IP address and PORT that a socket will connect to.
        const socket = io.connect('http://172.46.2.43:8081');

      // Handler function for choice message
      socket.on('pleaseChoose', function (message, gameID) {
        console.log(message)
        $('.card').click(function (event) {
          event.preventDefault()
          $(this).hide();
          socket.emit('cardChoice', $(this).data('value'), gameID)
          $('.card').off('click');
        })
      })

        function showNotification () {
          $('.toast').toast('show');
        }

        function hideNotification() {
          $('.toast').toast('hide');
        }


        // Handler function for receiving player info assignment messages
        socket.on('connect', function () {
          socket.emit('socketAssignment')
          // $('.toast .toast-body').prepend('Waiting for opponent...')
          // showNotification();
        })

        socket.on('pending', function (message) {
          $('.toast .toast-body').append(message)
          showNotification();
        })

        socket.on('foundopponent', function (message) {
          $('.toast .toast-body').empty();
          $('.toast .toast-body').append(message);
          showNotication();
        })

        // Handler function for welcome message
        socket.on('welcome', function (message, playerOneSuit, playerTwoSuit, prizeSuit) {
          console.log(JSON.parse(message));

          $('.player1-cards div').addClass(playerOneSuit);
          $('.player2-cards div').addClass(playerTwoSuit);
          $('#game-play div').addClass(prizeSuit);

          // hideNotification();
          // $('.toast .toast-body').empty();
          // $('.toast .toast-body').prepend(message)
          // showNotification();
        });

        // Handler function for choice message
        socket.on('pleaseChoose', function (message) {
          console.log(message)

          // hideNotification();
          // $('.toast .toast-body').empty();
          // $('.toast .toast-body').prepend(message);
          // showNotification();

          $('.player2-cards .card').click(function (event) {
            event.preventDefault();
            $('.card').off('click');
            $(this).hide();
            socket.emit('cardChoice', $(this).data('value'));
          })
        })

        socket.on('Selected', function () {
          console.log('Thank you. Please wait for your opponent to select a card.')
        })

        socket.on('lose', function (message) {
          console.log(message);
        })

        socket.on('win', function (message) {
          console.log(message);
        })

        socket.on('draw', function (message) {
          console.log(message);
        })

        socket.on('endgame', function (message) {
          console.log(message)
        })

        socket.on('drawgame', function (message) {
          console.log(message)
        })

      });
    </script>

  </body>
</html>

